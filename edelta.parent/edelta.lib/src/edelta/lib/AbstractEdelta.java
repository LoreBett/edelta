/**
 * 
 */
package edelta.lib;

import org.apache.log4j.Logger;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EClassifier;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.emf.ecore.EcorePackage;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;
import org.eclipse.emf.ecore.xmi.impl.XMIResourceFactoryImpl;
import org.eclipse.xtext.xbase.lib.Extension;

/**
 * Base class for code generated by the Edelta DSL
 * 
 * @author Lorenzo Bettini
 *
 */
public abstract class AbstractEdelta {

	private static final Logger LOG = Logger.getLogger(AbstractEdelta.class);

	/**
	 * Here we store all the Ecores used by the Edelta
	 */
	private ResourceSet resourceSet = new ResourceSetImpl();

	/**
	 * This will be used in the generated code with extension methods.
	 */
	@Extension
	protected EdeltaLibrary lib = new EdeltaLibrary();

	public AbstractEdelta() {
		// Register the appropriate resource factory to handle all file extensions.
		resourceSet.getResourceFactoryRegistry().getExtensionToFactoryMap().put
			(Resource.Factory.Registry.DEFAULT_EXTENSION, 
			 new XMIResourceFactoryImpl());

		// Register the Ecore package to ensure it is available during loading.
		resourceSet.getPackageRegistry().put
			(EcorePackage.eNS_URI, 
			 EcorePackage.eINSTANCE);
	}

	/**
	 * Performs the actual execution of the transformation.
	 * 
	 * @throws Exception
	 */
	public void execute() throws Exception {
		
	}

	public void loadEcoreFile(String path) {
		URI uri = URI.createFileURI(path);
		// Demand load resource for this file.
		LOG.info("loading " + path);
		resourceSet.getResource(uri, true);
	}

	public EPackage getEPackage(String packageName) {
		return resourceSet.getResources().
			stream().
			map(resource -> resource.getContents().get(0)).
			filter(o -> o instanceof EPackage).
			map(o -> (EPackage) o).
			filter(p -> p.getName().equals(packageName)).
			findAny().
			orElse(null);
	}

	public EClassifier getEClassifier(String packageName, String classifierName) {
		EPackage p = getEPackage(packageName);
		if (p == null) {
			return null;
		}
		return p.getEClassifier(classifierName);
	}

	public EClass getEClass(String packageName, String className) {
		EClassifier c = getEClassifier(packageName, className);
		if (c instanceof EClass) {
			return (EClass) c;
		}
		return null;
	}

	public EDataType getEDataType(String packageName, String datatypeName) {
		EClassifier c = getEClassifier(packageName, datatypeName);
		if (c instanceof EDataType) {
			return (EDataType) c;
		}
		return null;
	}
}
