/*
 * generated by Xtext 2.10.0
 */
package edelta.ui.wizard


import com.google.inject.Inject
import org.eclipse.xtext.generator.IFileSystemAccess2
import org.eclipse.xtext.resource.FileExtensionProvider

class EdeltaNewProjectWizardInitialContents {
	@Inject
	FileExtensionProvider fileExtensionProvider

	def generateInitialContents(IFileSystemAccess2 fsa) {
		fsa.generateFile(
			"src/Example." + fileExtensionProvider.primaryFileExtension,
			'''
			import org.eclipse.emf.ecore.EClass
			
			// IMPORTANT: ecores must be in a source directory
			// otherwise you can't refer to them
			
			package com.example
			
			metamodel "myecore"
			metamodel "ecore"
			
			/*
			 * Reusable function to add standard features to an
			 * {@link EClass}.
			 * 
			 * @param c
			 */
			def addStandardFeatures(EClass c) {
				// use standard EMF API to add manually features
				c.EStructuralFeatures += newEAttribute("name") => [
					// refer to Ecore elements with "ecoreref()"
					EType = ecoreref(EString)
				]
				// and supertypes
				c.ESuperTypes += ecoreref(MyEClass)
			}
			
			// create new EClass with Edelta DSL syntax
			createEClass NewClass in myecore {
				// the created EClass is available through the
				// special implicit parameter 'it' in this block
				
				// reuse your functions
				addStandardFeatures(it)
				
				// create new features with Edelta DSL syntax
				createEAttribute age type EInt {
					// the created EAttribute is available through the
					// special implicit parameter 'it' in this block
					// which can be used as implicit receiver, like 'this'
					lowerBound = 1
				}
				
				// or manually with EMF API
				EStructuralFeatures += newEReference("myReference") => [
					// references to Ecore elements can be fully qualified
					EType = ecoreref(myecore.MyEClass)
					upperBound = -1
					lowerBound = 0
					containment = true
				]
			}
			
			// change existing EClass
			changeEClass myecore.MyEClass {
				EStructuralFeatures += newEReference("myOtherReference") => [
					// new elements are immediately available
					EType = ecoreref(myecore.NewClass)
					containment = false
				]
			}
			'''
			)
		fsa.generateFile(
			"model/My.ecore",
			'''
			<?xml version="1.0" encoding="UTF-8"?>
			<ecore:EPackage xmi:version="2.0" xmlns:xmi="http://www.omg.org/XMI" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
			    xmlns:ecore="http://www.eclipse.org/emf/2002/Ecore" name="myecore" nsURI="http://www.eclipse.org/emf/2002/Myecore" nsPrefix="myecore">
			  <eClassifiers xsi:type="ecore:EClass" name="MyEClass">
			    <eStructuralFeatures xsi:type="ecore:EAttribute" name="astring" eType="ecore:EDataType http://www.eclipse.org/emf/2002/Ecore#//EString"/>
			  </eClassifiers>
			  <eClassifiers xsi:type="ecore:EEnum" name="MyENum">
			    <eLiterals name="FirstEnumLiteral"/>
			    <eLiterals name="SecondEnumLiteral" value="1"/>
			  </eClassifiers>
			  <eClassifiers xsi:type="ecore:EClass" name="MyOtherEClass"/>
			</ecore:EPackage>
			'''
			)
		fsa.generateFile(
			"src/com/example/Main.java",
			'''
			package com.example;
			
			import edelta.lib.AbstractEdelta;
			
			public class Main {
			
				public static void main(String[] args) throws Exception {
					// Create an instance of the generated Java class
					AbstractEdelta edelta = new Example();
					// Make sure you load all the used Ecores
					edelta.loadEcoreFile("model/My.ecore");
					// Execute the actual transformations defined in the DSL
					edelta.execute();
					// Save the modified Ecore model into a new path
					edelta.saveModifiedEcores("modified");
				}
			}
			'''
			)
		fsa.generateFile(
			"modified/README",
			'''
			Modified ecores will be saved here (see Main.java file)
			'''
			)
	}
}
