/*
 * generated by Xtext 2.10.0
 */
package edelta.tests

import com.google.inject.Inject
import edelta.compiler.EdeltaCompilerUtil
import org.eclipse.xtext.junit4.InjectWith
import org.eclipse.xtext.junit4.XtextRunner
import org.junit.Test
import org.junit.runner.RunWith

import static org.junit.Assert.*

@RunWith(XtextRunner)
@InjectWith(EdeltaInjectorProviderCustom)
class EdeltaCompilerUtilTest extends EdeltaAbstractTest {

	@Inject extension EdeltaCompilerUtil

	@Test
	def void testMethodNameForCreatedEClass() {
		val program = '''
		package test
		
		metamodel "foo"
		
		createEClass First in foo
		createEClass Second in foo
		createEClass Third in 
		'''.
		parseWithTestEcore
		program.main.expressions => [
			assertEquals("_createEClass_First_in_foo", get(0).methodName)
			assertEquals("_createEClass_Second_in_foo", get(1).methodName)
			assertEquals("_createEClass_Third_in_", get(2).methodName)
		]
	}

	@Test
	def void testMethodNameForXExpression() {
		val program = '''
		package test
		
		eclass Foo
		'''.
		parseWithTestEcore
		program.main.expressions => [
			assertNull("_createEClass_First_in_foo", get(0).methodName)
		]
	}

	@Test(expected=IllegalArgumentException)
	def void testMethodNameForNull() {
		assertNull("_createEClass_First_in_foo", methodName(null))
	}

}
