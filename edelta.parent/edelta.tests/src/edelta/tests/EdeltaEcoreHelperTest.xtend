/*
 * generated by Xtext 2.10.0
 */
package edelta.tests

import com.google.inject.Inject
import edelta.edelta.EdeltaProgram
import edelta.util.EdeltaEcoreHelper
import org.eclipse.emf.ecore.ENamedElement
import org.eclipse.emf.ecore.EPackage
import org.eclipse.emf.ecore.xmi.XMIResource
import org.eclipse.xtext.junit4.InjectWith
import org.eclipse.xtext.junit4.XtextRunner
import org.junit.Test
import org.junit.runner.RunWith

@RunWith(XtextRunner)
@InjectWith(EdeltaInjectorProviderCustom)
class EdeltaEcoreHelperTest extends EdeltaAbstractTest {

	@Inject extension EdeltaEcoreHelper

	@Test
	def void testProgramENamedElements() {
		referencesToMetamodels.parseWithTestEcores.
			getProgramENamedElements.
			assertNamedElements(
				'''
				FooClass
				myAttribute
				myReference
				FooDataType
				BarClass
				myAttribute
				myReference
				BarDataType
				foo
				bar
				'''
			)
	}

	@Test
	def void testProgramWithCreatedEClassENamedElements() {
		referenceToCreatedEClass.parseWithTestEcore => [
			getProgramENamedElements.
			assertNamedElements(
				'''
				NewClass
				FooClass
				myAttribute
				myReference
				FooDataType
				foo
				'''
			)
		// NewClass is the one created in the program
		]
	}

	@Test
	def void testEPackageENamedElements() {
		referenceToMetamodel.parseWithTestEcore => [
			getENamedElements(getEPackageByName("foo"), it).
			assertNamedElements(
				'''
				FooClass
				FooDataType
				'''
			)
		]
	}

	@Test
	def void testEPackageENamedElementsWithCreatedEClass() {
		referenceToCreatedEClass.parseWithTestEcore => [
			getENamedElements(getEPackageByName("foo"), it).
			assertNamedElements(
				'''
				NewClass
				FooClass
				FooDataType
				'''
			)
		// NewClass is the one created in the program
		]
	}

	@Test
	def void testEDataTypeENamedElements() {
		referenceToMetamodel.parseWithTestEcore => [
			getENamedElements(getEClassifierByName("foo", "FooDataType"), it).
			assertNamedElements(
				'''

				'''
			)
		]
	}

	@Test(expected=IllegalArgumentException)
	def void testNullENamedElements() {
		referenceToMetamodel.parseWithTestEcore => [
			getENamedElements(null, it)
		]
	}

	@Test
	def void testEClassENamedElements() {
		referenceToMetamodel.parseWithTestEcore => [
			getENamedElements(getEClassifierByName("foo", "FooClass"), it).
			assertNamedElements(
				'''
				myAttribute
				myReference
				'''
			)
		]
	}

//	@Test
//	def void testEClassifiersWithCreatedEClass() {
//		referenceToCreatedEClass.parseWithTestEcore.
//			getEClassifiers(null).
//			assertNamedElements(
//			"NewClass, FooClass, FooDataType, FooBarClass, FooBarDataType")
//		// NewClass is the one created in the program
//	}
//
//	@Test
//	def void testEClassifiersWithoutEPackage() {
//		referencesToMetamodels.parseWithTestEcores.
//			getEClassifiers(null).
//			assertNamedElements(
//			"FooClass, FooDataType, FooBarClass, FooBarDataType, BarClass, BarDataType, FooBarClass, FooBarDataType")
//	}
//
//	@Test
//	def void testEClassifiersWithEPackage() {
//		referencesToMetamodels.parseWithTestEcores => [
//			getEClassifiers(getEPackageByName("foo")).
//			assertNamedElements(
//			"FooClass, FooDataType, FooBarClass, FooBarDataType")
//		]
//	}
//
//	@Test
//	def void testEClassesWithoutPackage() {
//		referencesToMetamodels.parseWithTestEcores.
//			getEClasses(null).
//			assertNamedElements(
//			"FooClass, FooBarClass, BarClass, FooBarClass")
//	}
//
//	@Test
//	def void testEClassesWithPackage() {
//		referencesToMetamodels.parseWithTestEcores => [
//			getEClasses(getEPackageByName("foo")).
//			assertNamedElements(
//			"FooClass, FooBarClass")
//		]
//	}
//
//	@Test
//	def void testEDataTypesWithoutPackage() {
//		referencesToMetamodels.parseWithTestEcores.
//			getEDataTypes(null).
//			assertNamedElements(
//			"FooDataType, FooBarDataType, BarDataType, FooBarDataType")
//	}
//
//	@Test
//	def void testEDataTypesWithPackage() {
//		referencesToMetamodels.parseWithTestEcores => [
//			getEDataTypes(getEPackageByName("foo")).
//			assertNamedElements(
//			"FooDataType, FooBarDataType")
//		]
//	}

	def private assertNamedElements(Iterable<? extends ENamedElement> elements, CharSequence expected) {
		expected.assertEqualsStrings(
			elements.map[name].join("\n") + "\n"
		)
	}

	def private getEPackageByName(EdeltaProgram context, String packagename) {
		context.eResource.resourceSet.resources.filter(XMIResource).
			map[contents.head as EPackage].findFirst[name == packagename]
	}

	def private getEClassifierByName(EdeltaProgram context, String packagename, String classifiername) {
		getEPackageByName(context, packagename).EClassifiers.
			findFirst[name == classifiername]
	}
}
