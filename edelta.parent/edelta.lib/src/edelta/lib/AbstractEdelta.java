/**
 * 
 */
package edelta.lib;

import org.apache.log4j.Logger;
import org.eclipse.emf.common.util.URI;
import org.eclipse.emf.ecore.EcorePackage;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.emf.ecore.resource.ResourceSet;
import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;
import org.eclipse.emf.ecore.xmi.impl.XMIResourceFactoryImpl;

/**
 * Base class for code generated by the Edelta DSL
 * 
 * @author Lorenzo Bettini
 *
 */
public abstract class AbstractEdelta {

	private static final Logger LOG = Logger.getLogger(AbstractEdelta.class);

	/**
	 * Here we store all the Ecores used by the Edelta
	 */
	private ResourceSet resourceSet = new ResourceSetImpl();

	public AbstractEdelta() {
		// Register the appropriate resource factory to handle all file extensions.
		resourceSet.getResourceFactoryRegistry().getExtensionToFactoryMap().put
			(Resource.Factory.Registry.DEFAULT_EXTENSION, 
			 new XMIResourceFactoryImpl());

		// Register the Ecore package to ensure it is available during loading.
		resourceSet.getPackageRegistry().put
			(EcorePackage.eNS_URI, 
			 EcorePackage.eINSTANCE);
	}

	/**
	 * Performs the actual execution of the transformation.
	 * 
	 * @throws Exception
	 */
	public void execute() throws Exception {
		
	}

	public void loadEcoreFile(String path) {
		URI uri = URI.createFileURI(path);
		// Demand load resource for this file.
		LOG.info("loading " + path);
		resourceSet.getResource(uri, true);
	}

}
