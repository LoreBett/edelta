import org.eclipse.emf.ecore.EcoreFactory

// IMPORTANT: ecores must be in a source directory
// otherwise you can't refer to them

package com.example

// import existing metamodels
metamodel "myecore"
metamodel "ecore" // this one should usually be there

// you can define reusable functions...

/*
 * Reusable function to create a new EClass with the
 * specified name, setting MyEClass as its superclass
 * @param name
 */
def myReusableCreateSubclassOfMyEClass(String name) {
	newEClass(name) => [
		// refer to Ecore elements with ecoreref
		ESuperTypes += ecoreref(MyEClass)
	]
}

// ...and then modification blocks
// look at the "Outline" view, which immediately shows the modified EPackages

// specify modifications of an EPackage
modifyEcore someModifications epackage myecore {
	// the currently modified package is available
	// through the implicit parameter 'it', similar to 'this'	

	// use the standard Edelta library functions
	addNewEClass("NewClass") [
		// initialize it in a lambda block
		// where the new class is available through the implicit parameter 'it'
		addNewEAttribute("myStringAttribute", ecoreref(EString))
		addNewEReference("myReference", ecoreref(MyEClass)) [
			// initialization as above
			// the current element is available through the implicit parameter 'it'
			// use syntactic sugar for setters
			upperBound = -1;
			containment = true;
			lowerBound = 0
		]
	]
	// you could also modify existing Ecore elements manually
	ecoreref(MyENum).ELiterals += EcoreFactory.eINSTANCE.createEEnumLiteral => [
		// => [] is the 'with' operator
		name = "ANewEnumLiteral"
		value = 3
	]
	// or again with Edelta library functions
	ecoreref(MyENum).addNewEEnumLiteral("AnotherNewEnumLiteral") [
		value = 4
	]
}

// you can have several modification blocks for the same EPackage
modifyEcore otherModifications epackage myecore {
	// you can call the reusable functions you defined
	addEClass(myReusableCreateSubclassOfMyEClass("ASubclassOfMyEClass"))
	// remember you can use the 'with' operator
	addEClass(myReusableCreateSubclassOfMyEClass("AnotherSubclassOfMyEClass") => [
		// and refer to new classes you created in previous modification blocks
		ESuperTypes += ecoreref(NewClass)
	])

	// you can rename existing classes
	ecoreref(MyOtherEClass).name = "RenamedClass"
	// and the renamed version is immediately available
	ecoreref(RenamedClass).addNewEAttribute("addedNow", ecoreref(EInt))
}