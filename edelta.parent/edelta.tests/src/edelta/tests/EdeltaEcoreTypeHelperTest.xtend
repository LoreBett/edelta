/*
 * generated by Xtext 2.10.0
 */
package edelta.tests

import com.google.inject.Inject
import edelta.typesystem.EdeltaEcoreTypeHelper
import org.eclipse.emf.ecore.EAttribute
import org.eclipse.emf.ecore.EClass
import org.eclipse.emf.ecore.EDataType
import org.eclipse.emf.ecore.EEnum
import org.eclipse.emf.ecore.EEnumLiteral
import org.eclipse.emf.ecore.ENamedElement
import org.eclipse.emf.ecore.EPackage
import org.eclipse.emf.ecore.EReference
import org.eclipse.xtext.testing.InjectWith
import org.eclipse.xtext.testing.XtextRunner
import org.junit.Test
import org.junit.runner.RunWith

import static extension org.junit.Assert.*

@RunWith(XtextRunner)
@InjectWith(EdeltaInjectorProviderCustom)
class EdeltaEcoreTypeHelperTest extends EdeltaAbstractTest {

	@Inject extension EdeltaEcoreTypeHelper

	@Test
	def void testTypeOfReferenceToEPackage() {
		referenceToEPackage.assertType(EPackage)
	}

	@Test
	def void testTypeOfReferenceToEClass() {
		referenceToEClass.assertType(EClass)
	}

	@Test
	def void testTypeOfReferenceToEDataType() {
		referenceToEDataType.assertType(EDataType)
	}

	@Test
	def void testTypeOfReferenceToEEnum() {
		referenceToEEnum.assertType(EEnum)
	}

	@Test
	def void testTypeOfReferenceToEAttribute() {
		referenceToEAttribute.assertType(EAttribute)
	}

	@Test
	def void testTypeOfReferenceToEReference() {
		referenceToEReference.assertType(EReference)
	}

	@Test
	def void testTypeOfReferenceToEEnumLiteral() {
		referenceToEEnumLiteral.assertType(EEnumLiteral)
	}

	@Test
	def void testTypeOfReferenceToUnresolvedENamedElement() {
		"ecoreref(NonExistant)".assertType(ENamedElement)
	}

	def private assertType(CharSequence input, Class<?> expected) {
		input.parseWithTestEcore.
		lastExpression.
		edeltaEcoreReferenceExpression.reference.enamedelement => [
			expected.canonicalName.assertEquals(
				correspondingENamedElement.name
			)
		]
	}

}
