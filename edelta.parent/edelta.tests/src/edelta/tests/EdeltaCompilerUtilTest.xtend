/*
 * generated by Xtext 2.10.0
 */
package edelta.tests

import com.google.inject.Inject
import edelta.compiler.EdeltaCompilerUtil
import org.eclipse.xtext.junit4.InjectWith
import org.eclipse.xtext.junit4.XtextRunner
import org.junit.Test
import org.junit.runner.RunWith

import static extension org.junit.Assert.*
import org.eclipse.emf.ecore.EClassifier
import org.eclipse.emf.ecore.EStructuralFeature

@RunWith(XtextRunner)
@InjectWith(EdeltaInjectorProviderCustom)
class EdeltaCompilerUtilTest extends EdeltaAbstractTest {

	@Inject extension EdeltaCompilerUtil

	@Test
	def void testMethodNameForCreatedEClass() {
		val program = '''
		package test
		
		metamodel "foo"
		
		createEClass First in foo
		createEClass Second in foo
		createEClass Third in 
		'''.
		parseWithTestEcore
		program.main.expressions => [
			assertEquals("_createEClass_First_in_foo", get(0).methodName)
			assertEquals("_createEClass_Second_in_foo", get(1).methodName)
			assertEquals("_createEClass_Third_in_", get(2).methodName)
		]
	}

	@Test
	def void testMethodNameForCreatedEAttribute() {
		val program = '''
		package test
		
		metamodel "foo"
		
		createEClass First in foo {
			createEAttribute inFirst {}
		}
		createEClass Second in foo {
			createEAttribute inSecond {}
		}
		createEClass Third in {
			createEAttribute inSecond {}
		}
		'''.
		parseWithTestEcore
		program.main.expressions => [
			assertEquals("_createEAttribute_inFirst_in_createEClass_First_in_foo",
				get(0).createEClassExpression.body.expressions.head.methodName)
			assertEquals("_createEAttribute_inSecond_in_createEClass_Second_in_foo",
				get(1).createEClassExpression.body.expressions.head.methodName)
			assertEquals("_createEAttribute_inSecond_in_createEClass_Third_in_",
				get(2).createEClassExpression.body.expressions.head.methodName)
		]
	}

	@Test
	def void testMethodNameForXExpression() {
		val program = '''
		package test
		
		eclass Foo
		'''.
		parseWithTestEcore
		program.main.expressions => [
			assertNull("_createEClass_First_in_foo", get(0).methodName)
		]
	}

	@Test(expected=IllegalArgumentException)
	def void testMethodNameForNull() {
		assertNull("_createEClass_First_in_foo", methodName(null))
	}

	@Test
	def void testConsumerArgumentForBody() {
		createEClass.parseWithTestEcore.
		main.expressions => [
			"null".
				assertEquals(head.createEClassExpression.body.consumerArgumentForBody)
			"createList(this::_createEClass_MyDerivedNewClass_in_foo)".
				assertEquals(last.createEClassExpression.body.consumerArgumentForBody)
		]
	}

	@Test
	def void testEPackageNameOrNull() {
		'''
			metamodel "foo"
			
			createEClass MyNewClass in foo

			createEClass MyNewClass in NonExistant
			
			createEClass MyDerivedNewClass 
		'''.parseWithTestEcore.
		main.expressions => [
			"foo".
				assertEquals(head.createEClassExpression.epackage.EPackageNameOrNull)
			assertNull(get(1).createEClassExpression.epackage.EPackageNameOrNull)
			assertNull(last.createEClassExpression.epackage.EPackageNameOrNull)
		]
	}

	@Test
	def void testEClassifierEPackageNameOrNull() {
		'''
			metamodel "foo"
			
			ecoreref(FooClass)
		'''.parseWithTestEcore.
		main.expressions => [
			"foo".
				assertEquals(
					(head.edeltaEcoreReferenceExpression.
						reference.enamedelement as EClassifier
					).EPackageNameOrNull
				)
			assertNull(
				(null as EClassifier).EPackageNameOrNull
			)
		]
	}

	@Test
	def void testEClassNameOrNull() {
		'''
			metamodel "foo"
			
			ecoreref(myAttribute)
			ecoreref(nonExistantAttribute)
		'''.parseWithTestEcore.
		main.expressions => [
			"FooClass".
				assertEquals(
					(head.edeltaEcoreReferenceExpression.
						reference.enamedelement as EStructuralFeature
					).EClassNameOrNull
				)
			assertNull(
				(last.edeltaEcoreReferenceExpression.
					reference.enamedelement as EStructuralFeature
				).EClassNameOrNull
			)
		]
	}
}
